# Default values for erpnext.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Configure external database host
# dbHost: ""
# dbPort: 3306
# dbRootUser: ""
# dbRootPassword: ""
# dbRds: false
# dbExistingSecret: ""
# dbExistingSecretPasswordKey: "password"

image:
  repository: frappe/erpnext
  tag: v15.83.0
  pullPolicy: IfNotPresent

nginx:
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 75
    targetMemory: 75
  # config: |
  #   # custom conf /etc/nginx/conf.d/default.conf
  environment:
    upstreamRealIPAddress: "127.0.0.1"
    upstreamRealIPRecursive: "off"
    upstreamRealIPHeader: "X-Forwarded-For"
    frappeSiteNameHeader: "$host"
    proxyReadTimeout: "120"
    clientMaxBodySize: "50m"
  livenessProbe:
    tcpSocket:
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 10
  readinessProbe:
    tcpSocket:
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 10
  service:
    type: ClusterIP
    port: 8080
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # Custom topologySpreadConstraints (uncomment and modify to override defaults)
  # topologySpreadConstraints:
  #   - maxSkew: 2
  #     topologyKey: failure-domain.beta.kubernetes.io/zone
  #     whenUnsatisfiable: ScheduleAnyway

  # Default topologySpreadConstraints (used if topologySpreadConstraints is not set)
  defaultTopologySpread:
    maxSkew: 1
    topologyKey: kubernetes.io/hostname
    whenUnsatisfiable: DoNotSchedule
  envVars: []
  initContainers: []
  sidecars: []

worker:
  gunicorn:
    replicaCount: 1
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 3
      targetCPU: 75
      targetMemory: 75
    livenessProbe:
      tcpSocket:
        port: 8000
      initialDelaySeconds: 5
      periodSeconds: 10
    readinessProbe:
      tcpSocket:
        port: 8000
      initialDelaySeconds: 5
      periodSeconds: 10
    service:
      type: ClusterIP
      port: 8000
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    args: []
    envVars: []
    initContainers: []
    sidecars: []

  default:
    replicaCount: 1
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 3
      targetCPU: 75
      targetMemory: 75
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    livenessProbe:
      override: false
      probe: {}
    readinessProbe:
      override: false
      probe: {}
    envVars: []
    initContainers: []
    sidecars: []

  short:
    replicaCount: 1
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 3
      targetCPU: 75
      targetMemory: 75
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    livenessProbe:
      override: false
      probe: {}
    readinessProbe:
      override: false
      probe: {}
    envVars: []
    initContainers: []
    sidecars: []

  long:
    replicaCount: 1
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 3
      targetCPU: 75
      targetMemory: 75
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    livenessProbe:
      override: false
      probe: {}
    readinessProbe:
      override: false
      probe: {}
    envVars: []
    initContainers: []
    sidecars: []

  scheduler:
    replicaCount: 1
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    livenessProbe:
      override: false
      probe: {}
    readinessProbe:
      override: false
      probe: {}
    envVars: []
    initContainers: []
    sidecars: []


  # Custom topologySpreadConstraints (uncomment and modify to override defaults)
  # topologySpreadConstraints:
  #   - maxSkew: 2
  #     topologyKey: failure-domain.beta.kubernetes.io/zone
  #     whenUnsatisfiable: ScheduleAnyway

  # Default topologySpreadConstraints (used if topologySpreadConstraints is not set)
  defaultTopologySpread:
    maxSkew: 1
    topologyKey: kubernetes.io/hostname
    whenUnsatisfiable: DoNotSchedule


  healthProbe: |
    exec:
      command:
        - bash
        - -c
        - echo "Ping backing services";
        {{- if .Values.mariadb.enabled }}
        - wait-for-it {{ include "erpnext.fullname" . }}-mariadb:3306 -t 1;
        {{- else if .Values.dbHost }}
        - wait-for-it {{ .Values.dbHost }}:{{ .Values.dbPort | default .Values.mariadb.primary.service.ports.mysql }} -t 1;
        {{- end }}
        {{- if (index .Values "dragonfly-cache").enabled }}
        - wait-for-it {{ .Release.Name }}-dragonfly-cache:6379 -t 1;
        {{- end }}
        {{- if (index .Values "dragonfly-queue").enabled }}
        - wait-for-it {{ .Release.Name }}-dragonfly-queue:6379 -t 1;
        {{- end }}
        {{- if .Values.postgresql.host }}
        - wait-for-it {{ .Values.postgresql.host }}:5432 -t 1;
        {{- else if .Values.postgresql.enabled }}
        - wait-for-it {{ include "erpnext.fullname" . }}-postgresql:5432 -t 1;
        {{- end }}
    initialDelaySeconds: 15
    periodSeconds: 5

socketio:
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPU: 75
    targetMemory: 75
  livenessProbe:
    tcpSocket:
      port: 9000
    initialDelaySeconds: 5
    periodSeconds: 10
  readinessProbe:
    tcpSocket:
      port: 9000
    initialDelaySeconds: 5
    periodSeconds: 10
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  service:
    type: ClusterIP
    port: 9000
  envVars: []
  initContainers: []
  sidecars: []

persistence:
  worker:
    enabled: true
    # existingClaim: ""
    size: 8Gi
    # storageClass: "nfs"
    accessModes:
    - ReadWriteMany
  logs:
    # Container based log search and analytics stack recommended
    enabled: false
    # existingClaim: ""
    size: 8Gi
    # storageClass: "nfs"
    accessModes:
    - ReadWriteMany

# Ingress
ingress:
  # ingressName: ""
  # className: ""
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
  - host: erp.cluster.local
    paths:
    - path: /
      pathType: ImplementationSpecific
  tls: []
  #  - secretName: auth-server-tls
  #    hosts:
  #      - auth-server.local

jobs:
  volumePermissions:
    # jobName: ""
    enabled: false
    backoffLimit: 0
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}

  configure:
    # jobName: ""
    enabled: true
    fixVolume: true
    backoffLimit: 0
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    envVars: []
    command: []
    args: []

  createSite:
    # jobName: ""
    enabled: false
    forceCreate: false
    siteName: "erp.cluster.local"
    adminPassword: "changeit"
    adminExistingSecret: ""
    adminExistingSecretKey: "password"
    installApps:
    - "erpnext"
    dbType: "mariadb"
    backoffLimit: 0
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}

  dropSite:
    # jobName: ""
    enabled: false
    forced: false
    siteName: "erp.cluster.local"
    backoffLimit: 0
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}

  backup:
    # jobName: ""
    enabled: false
    siteName: "erp.cluster.local"
    withFiles: true
    backoffLimit: 0
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}

  migrate:
    # jobName: ""
    enabled: false
    siteName: "erp.cluster.local"
    skipFailing: false
    backoffLimit: 0
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}

  custom:
    enabled: false
    jobName: ""
    labels: {}
    backoffLimit: 0
    initContainers: []
    containers: []
    restartPolicy: Never
    volumes: []
    nodeSelector: {}
    affinity: {}
    tolerations: []

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true

podSecurityContext:
  supplementalGroups: [1000]

securityContext:
  capabilities:
    add:
    - CAP_CHOWN
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

mariadb:
  enabled: true
  image:
    repository: mariadb
    tag: "10.11"
    pullPolicy: IfNotPresent
  rootPassword: "changeit"
  persistence:
    # storageClass: "nfs"
    size: 8Gi
  resources: {}
  myCnf: |
    [mysqld]
    skip-character-set-client-handshake
    skip-innodb-read-only-compressed
    character-set-server=utf8mb4
    collation-server=utf8mb4_unicode_ci


dragonfly-cache:
  # Using DragonflyDB: https://www.dragonflydb.io/
  # https://github.com/dragonflydb/dragonfly/tree/main/helm/dragonfly
  enabled: true
  # host: ""
  # No persistence for cache

dragonfly-queue:
  # Using DragonflyDB: https://www.dragonflydb.io/
  # https://github.com/dragonflydb/dragonfly/tree/main/helm/dragonfly
  enabled: true
  # host: ""
  # Persistence can be enabled for queue
  storage:
    enabled: false
    # The size of the PersistentVolumeClaim.
    size: 8Gi
    # The name of the StorageClass to use. If not specified, the default StorageClass will be used.
    # storageClassName: "nfs"

postgresql:
  enabled: false
  image:
    repository: postgres
    tag: "15"
    pullPolicy: IfNotPresent
  postgresUser: "postgres"
  postgresPassword: "changeit"
  persistence:
    # storageClass: "nfs"
    size: 8Gi
  resources: {}
