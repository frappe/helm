{{- if .Values.jobs.createSite.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  {{- if .Values.jobs.createSite.jobName }}
  name: {{ .Values.jobs.createSite.jobName }}
  {{- else }}
  name: {{ template "erpnext.fullname" . }}-new-site-{{ now | date "20060102150405" }}
  {{- end }}
  labels:
    {{- include "erpnext.labels" . | nindent 4 }}
  annotations:
{{- with .Values.jobs.createSite.annotations }}
{{- range $key, $value := . }}
    {{ $key }}: {{ $value | quote }}
{{- end }}
{{- end }}
spec:
  backoffLimit: {{ .Values.jobs.createSite.backoffLimit }}
  template:
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ template "erpnext.serviceAccountName" $ }}
      securityContext:
        {{- toYaml $.Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: validate-config
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["bash", "-c"]
          args:
            - >
              export start=`date +%s`;
              until [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".db_host // empty"` ]] && \
                [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".redis_cache // empty"` ]] && \
                [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".redis_queue // empty"` ]];
              do
                echo "Waiting for sites/common_site_config.json to be created";
                sleep 5;
                if (( `date +%s`-start > 600 )); then
                  echo "could not find sites/common_site_config.json with required keys";
                  exit 1
                fi
              done;
              echo "sites/common_site_config.json found";

              echo "Waiting for database to be reachable...";
              wait-for-it -t 180 $(DB_HOST):$(DB_PORT);
              echo "Database is reachable.";
          env:
            - name: "DB_HOST"
              {{- if .Values.postgresql.host }}
              value: {{ .Values.postgresql.host }}
              {{- else if .Values.postgresql.enabled }}
              value: {{ .Release.Name }}-postgresql
              {{- else if .Values.mariadb.enabled }}
              {{- if eq .Values.mariadb.architecture "replication" }}
              value: {{ .Release.Name }}-mariadb-primary
              {{- else }}
              value: {{ .Release.Name }}-mariadb
              {{- end }}
              {{- else }}
              value: "{{ .Values.dbHost }}"
              {{- end }}
            - name: "DB_PORT"
              {{- if .Values.dbPort }}
              value: {{ .Values.dbPort | quote }}
              {{- else if .Values.postgresql.enabled }}
              value: {{ .Values.postgresql.primary.service.ports.postgresql | quote }}
              {{- else }}
              value: {{ .Values.mariadb.primary.service.ports.mysql | quote }}
              {{- end }}
          resources:
            {{- toYaml .Values.jobs.createSite.resources | nindent 12 }}
          securityContext:
            {{- toYaml $.Values.securityContext | nindent 12 }}
          volumeMounts:
            - name: sites-dir
              mountPath: /home/frappe/frappe-bench/sites
      containers:
      - name: create-site
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["bash", "-c"]
        args:
          - >
            set -x;

            bench_output=$(bench new-site ${SITE_NAME} \
              --no-mariadb-socket \
              --db-type=${DB_TYPE} \
              --db-host=${DB_HOST} \
              --db-port=${DB_PORT} \
              --admin-password=${ADMIN_PASSWORD} \
              --mariadb-root-username=${DB_ROOT_USER} \
              --mariadb-root-password=${DB_ROOT_PASSWORD} \
            {{- if .Values.jobs.createSite.installApps }}
              {{- range .Values.jobs.createSite.installApps }}
              --install-app={{ . }} \
              {{- end }}
            {{- end }}
            {{- if .Values.jobs.createSite.forceCreate }}
              --force \
            {{- end }}
             | tee /dev/stderr);

            bench_exit_status=$?;

            if [ $bench_exit_status -ne 0 ]; then
                # Don't consider the case "site already exists" an error.
                if [[ $bench_output == *"already exists"* ]]; then
                    echo "Site already exists, continuing...";
                else
                    echo "An error occurred in bench new-site: $bench_output"
                    exit $bench_exit_status;
                fi
            fi

            set -e;

            rm -f currentsite.txt
        env:
          - name: "SITE_NAME"
            value: "{{ .Values.jobs.createSite.siteName }}"
          - name: "DB_TYPE"
            value: {{ .Values.jobs.createSite.dbType }}
          - name: "DB_HOST"
            {{- if .Values.postgresql.host }}
            value: {{ .Values.postgresql.host }}
            {{- else if .Values.postgresql.enabled }}
            value: {{ .Release.Name }}-postgresql
            {{- else if .Values.mariadb.enabled }}
            {{- if eq .Values.mariadb.architecture "replication" }}
            value: {{ .Release.Name }}-mariadb-primary
            {{- else }}
            value: {{ .Release.Name }}-mariadb
            {{- end }}
            {{- else }}
            value: "{{ .Values.dbHost }}"
            {{- end }}
          - name: "DB_PORT"
            {{- if .Values.dbPort }}
            value: {{ .Values.dbPort | quote }}
            {{- else if .Values.postgresql.enabled }}
            value: {{ .Values.postgresql.primary.service.ports.postgresql | quote }}
            {{- else }}
            value: {{ .Values.mariadb.primary.service.ports.mysql | quote }}
            {{- end }}
          - name: "DB_ROOT_USER"
            {{- if .Values.dbRootUser }}
            value: "{{ .Values.dbRootUser }}"
            {{- else if .Values.postgresql.enabled }}
            value: "postgres"
            {{- else if .Values.mariadb.enabled }}
            value: "root"
            {{- end }}
          - name: "DB_ROOT_PASSWORD"
            {{- if .Values.dbRootPassword }}
            valueFrom:
              secretKeyRef:
                key:  db-root-password
                name: {{ .Release.Name }}
            {{- else if .Values.postgresql.enabled }}
            valueFrom:
              secretKeyRef:
                key: postgres-password
                name: {{ .Release.Name }}-postgresql
            {{- else if .Values.mariadb.enabled }}
            valueFrom:
              secretKeyRef:
                key: mariadb-root-password
                name: {{ .Release.Name }}-mariadb
            {{- end }}
          - name: "ADMIN_PASSWORD"
            value: "{{ .Values.jobs.createSite.adminPassword }}"
        resources:
          {{- toYaml .Values.jobs.createSite.resources | nindent 10 }}
        securityContext:
          {{- toYaml $.Values.securityContext | nindent 10 }}
        volumeMounts:
          - name: sites-dir
            mountPath: /home/frappe/frappe-bench/sites
          - name: logs
            mountPath: /home/frappe/frappe-bench/logs
      restartPolicy: Never
      volumes:
        - name: sites-dir
          {{- if .Values.persistence.worker.enabled }}
          persistentVolumeClaim:
            {{- if .Values.persistence.worker.existingClaim }}
            claimName: {{ .Values.persistence.worker.existingClaim }}
            {{- else }}
            claimName: {{ template "erpnext.fullname" . }}
            {{- end }}
            readOnly: false
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: logs
          {{- if .Values.persistence.logs.enabled }}
          persistentVolumeClaim:
            {{- if .Values.persistence.logs.existingClaim }}
            claimName: {{ .Values.persistence.logs.existingClaim }}
            {{- else }}
            claimName: {{ template "erpnext.fullname" . }}-logs
            {{- end }}
            readOnly: false
          {{- else }}
          emptyDir: {}
          {{- end }}
      {{- with .Values.jobs.createSite.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.jobs.createSite.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.jobs.createSite.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
