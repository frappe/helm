{
  "version": 4,
  "terraform_version": "1.10.2",
  "serial": 16,
  "lineage": "788a8431-cb00-301a-c086-d9f749b6aa91",
  "outputs": {
    "argocd_installation": {
      "value": {
        "namespace": "argocd",
        "release": "argocd"
      },
      "type": [
        "object",
        {
          "namespace": "string",
          "release": "string"
        }
      ]
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "argocd",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "argo-cd",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "argocd",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v2.9.3",
                "chart": "argo-cd",
                "first_deployed": 1734469588,
                "last_deployed": 1734469588,
                "name": "argocd",
                "namespace": "argocd",
                "notes": "\n\nIn order to access the server UI you have the following options:\n\n1. kubectl port-forward service/argocd-server -n argocd 8080:443\n\n    and then open the browser on http://localhost:8080 and accept the certificate\n\n2. enable ingress in the values file `server.ingress.enabled` and either\n      - Add the annotation for ssl passthrough: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-1-ssl-passthrough\n      - Set the `configs.params.\"server.insecure\"` in the values file and terminate SSL at your ingress: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-2-multiple-ingress-objects-and-hosts\n\n\nAfter reaching the UI the first time you can login with username: admin and the random password generated during the installation. You can find the password by running:\n\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n\n(You should delete the initial secret afterwards as suggested by the Getting Started Guide: https://argo-cd.readthedocs.io/en/stable/getting_started/#4-login-using-the-cli)\n",
                "revision": 1,
                "values": "{\"server\":{\"service\":{\"type\":\"ClusterIP\"}}}",
                "version": "5.51.6"
              }
            ],
            "name": "argocd",
            "namespace": "argocd",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://argoproj.github.io/argo-helm",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "server.service.type",
                "type": "",
                "value": "ClusterIP"
              }
            ],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": null,
            "verify": false,
            "version": "5.51.6",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_namespace.argocd"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "argocd-apps",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "argocd-apps",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "argocd-apps",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "",
                "chart": "argocd-apps",
                "first_deployed": 1734469615,
                "last_deployed": 1734469615,
                "name": "argocd-apps",
                "namespace": "argocd",
                "notes": "",
                "revision": 1,
                "values": "{\"applicationSet\":{\"replicaCount\":1},\"controller\":{\"replicas\":1},\"repoServer\":{\"replicas\":1},\"server\":{\"replicas\":1,\"service\":{\"type\":\"LoadBalancer\"}}}",
                "version": "1.4.1"
              }
            ],
            "name": "argocd-apps",
            "namespace": "argocd",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://argoproj.github.io/argo-helm",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "# redis-ha:\n#   enabled: true\n\ncontroller:\n  replicas: 1\n\nserver:\n  replicas: 1\n  service:\n    type: LoadBalancer\n\nrepoServer:\n  replicas: 1\n\napplicationSet:\n  replicaCount: 1\n  # replicaCount: 2"
            ],
            "verify": false,
            "version": "1.4.1",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.argocd",
            "kubernetes_namespace.argocd"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "frappe_erpnext",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "status": "tainted",
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "erpnext",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "frappe-bench",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v15.45.5",
                "chart": "erpnext",
                "first_deployed": 1734469723,
                "last_deployed": 1734469723,
                "name": "frappe-bench",
                "namespace": "erpnext",
                "notes": "CHART NAME: redis-queue\nCHART VERSION: 17.15.2\nAPP VERSION: 7.0.12\n\n** Please be patient while the chart is being deployed **\n\nRedis\u0026reg; can be accessed via port 6379 on the following DNS name from within your cluster:\n\n    frappe-bench-redis-queue-master.erpnext.svc.cluster.local\n\n\n\nTo connect to your Redis\u0026reg; server:\n\n1. Run a Redis\u0026reg; pod that you can use as a client:\n\n   kubectl run --namespace erpnext redis-client --restart='Never'  --image docker.io/bitnami/redis:7.0.12-debian-11-r19 --command -- sleep infinity\n\n   Use the following command to attach to the pod:\n\n   kubectl exec --tty -i redis-client \\\n   --namespace erpnext -- bash\n\n2. Connect using the Redis\u0026reg; CLI:\n   redis-cli -h frappe-bench-redis-queue-master\n\nTo connect to your database from outside the cluster execute the following commands:\n\n    kubectl port-forward --namespace erpnext svc/frappe-bench-redis-queue-master 6379:6379 \u0026\n    redis-cli -h 127.0.0.1 -p 6379\n\nCHART NAME: redis-cache\nCHART VERSION: 17.15.2\nAPP VERSION: 7.0.12\n\n** Please be patient while the chart is being deployed **\n\nRedis\u0026reg; can be accessed via port 6379 on the following DNS name from within your cluster:\n\n    frappe-bench-redis-cache-master.erpnext.svc.cluster.local\n\n\n\nTo connect to your Redis\u0026reg; server:\n\n1. Run a Redis\u0026reg; pod that you can use as a client:\n\n   kubectl run --namespace erpnext redis-client --restart='Never'  --image docker.io/bitnami/redis:7.0.12-debian-11-r19 --command -- sleep infinity\n\n   Use the following command to attach to the pod:\n\n   kubectl exec --tty -i redis-client \\\n   --namespace erpnext -- bash\n\n2. Connect using the Redis\u0026reg; CLI:\n   redis-cli -h frappe-bench-redis-cache-master\n\nTo connect to your database from outside the cluster execute the following commands:\n\n    kubectl port-forward --namespace erpnext svc/frappe-bench-redis-cache-master 6379:6379 \u0026\n    redis-cli -h 127.0.0.1 -p 6379\n\nFrappe/ERPNext Release deployed\n\nRelease Name: frappe-bench-erpnext\n\nWait for the pods to start.\nTo create sites and other resources, refer:\nhttps://github.com/frappe/helm/blob/main/erpnext/README.md\n\nFrequently Asked Questions:\nhttps://helm.erpnext.com/faq\n",
                "revision": 1,
                "values": "{\"dbHost\":\"mariadb.database.svc.cluster.local\",\"dbPort\":3306,\"dbRds\":false,\"dbRootPassword\":\"SMNGg8X66YhT7UfW\",\"dbRootUser\":\"root\",\"fullnameOverride\":\"\",\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"mabecenter/erpnext\",\"tag\":\"0.0.1-42b2b99\"},\"imagePullSecrets\":[],\"ingress\":{\"annotations\":{},\"className\":\"nginx\",\"enabled\":true,\"hosts\":[{\"host\":\"erp.cluster.local\",\"paths\":[{\"path\":\"/\",\"pathType\":\"Prefix\"}]}],\"ingressName\":\"erpnext-ingress\"},\"jobs\":{\"backup\":{\"affinity\":{},\"backoffLimit\":0,\"enabled\":true,\"nodeSelector\":{},\"resources\":{},\"siteName\":\"erp.cluster.local\",\"tolerations\":[],\"withFiles\":true},\"configure\":{\"affinity\":{},\"args\":[],\"backoffLimit\":0,\"command\":[],\"enabled\":true,\"envVars\":[],\"fixVolume\":true,\"nodeSelector\":{},\"resources\":{},\"tolerations\":[]},\"createSite\":{\"adminPassword\":\"changeit\",\"affinity\":{},\"backoffLimit\":0,\"dbType\":\"mariadb\",\"enabled\":true,\"forceCreate\":false,\"installApps\":[\"erpnext\",\"mabecenter\"],\"nodeSelector\":{},\"resources\":{},\"siteName\":\"erp.cluster.local\",\"tolerations\":[]},\"custom\":{\"affinity\":{},\"backoffLimit\":0,\"containers\":[],\"enabled\":false,\"initContainers\":[],\"jobName\":\"\",\"labels\":{},\"nodeSelector\":{},\"restartPolicy\":\"Never\",\"tolerations\":[],\"volumes\":[]},\"dropSite\":{\"affinity\":{},\"backoffLimit\":0,\"enabled\":false,\"forced\":false,\"nodeSelector\":{},\"resources\":{},\"siteName\":\"erp.cluster.local\",\"tolerations\":[]},\"migrate\":{\"affinity\":{},\"backoffLimit\":0,\"enabled\":true,\"nodeSelector\":{},\"resources\":{},\"siteName\":\"erp.cluster.local\",\"skipFailing\":false,\"tolerations\":[]},\"volumePermissions\":{\"affinity\":{},\"backoffLimit\":0,\"enabled\":false,\"nodeSelector\":{},\"resources\":{},\"tolerations\":[]}},\"mariadb\":{\"auth\":{\"password\":\"changeit\",\"replicationPassword\":\"changeit\",\"rootPassword\":\"changeit\",\"username\":\"erpnext\"},\"enabled\":false,\"primary\":{\"extraFlags\":\"--skip-character-set-client-handshake --skip-innodb-read-only-compressed --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\",\"service\":{\"ports\":{\"mysql\":3306}}}},\"nameOverride\":\"\",\"nginx\":{\"affinity\":{},\"autoscaling\":{\"enabled\":true,\"maxReplicas\":3,\"minReplicas\":1,\"targetCPU\":75,\"targetMemory\":75},\"defaultTopologySpread\":{\"maxSkew\":1,\"topologyKey\":\"kubernetes.io/hostname\",\"whenUnsatisfiable\":\"DoNotSchedule\"},\"envVars\":[],\"environment\":{\"frappeSiteNameHeader\":\"$host\",\"upstreamRealIPAddress\":\"127.0.0.1\",\"upstreamRealIPHeader\":\"X-Forwarded-For\",\"upstreamRealIPRecursive\":\"off\"},\"initContainers\":[],\"livenessProbe\":{\"initialDelaySeconds\":60,\"periodSeconds\":10,\"tcpSocket\":{\"port\":8080}},\"nodeSelector\":{},\"readinessProbe\":{\"initialDelaySeconds\":60,\"periodSeconds\":10,\"tcpSocket\":{\"port\":8080}},\"replicaCount\":1,\"resources\":{},\"service\":{\"port\":8080,\"type\":\"ClusterIP\"},\"sidecars\":[],\"tolerations\":[]},\"persistence\":{\"logs\":{\"accessModes\":[\"ReadWriteMany\"],\"enabled\":true,\"size\":\"8Gi\",\"storageClass\":\"nfs\"},\"worker\":{\"accessModes\":[\"ReadWriteMany\"],\"enabled\":true,\"size\":\"8Gi\",\"storageClass\":\"nfs\"}},\"podSecurityContext\":{\"supplementalGroups\":[1000]},\"postgresql\":{\"auth\":{\"postgresPassword\":\"changeit\",\"username\":\"postgres\"},\"enabled\":false,\"primary\":{\"service\":{\"ports\":{\"postgresql\":5432}}}},\"redis-cache\":{\"architecture\":\"standalone\",\"auth\":{\"enabled\":false,\"sentinal\":false},\"enabled\":true,\"master\":{\"containerPorts\":{\"redis\":6379},\"persistence\":{\"enabled\":false}}},\"redis-queue\":{\"architecture\":\"standalone\",\"auth\":{\"enabled\":false,\"sentinal\":false},\"enabled\":true,\"master\":{\"containerPorts\":{\"redis\":6379},\"persistence\":{\"enabled\":false}}},\"securityContext\":{\"capabilities\":{\"add\":[\"CAP_CHOWN\"]}},\"serviceAccount\":{\"create\":true},\"socketio\":{\"affinity\":{},\"autoscaling\":{\"enabled\":true,\"maxReplicas\":3,\"minReplicas\":1,\"targetCPU\":75,\"targetMemory\":75},\"envVars\":[],\"initContainers\":[],\"livenessProbe\":{\"initialDelaySeconds\":5,\"periodSeconds\":10,\"tcpSocket\":{\"port\":9000}},\"nodeSelector\":{},\"readinessProbe\":{\"initialDelaySeconds\":5,\"periodSeconds\":10,\"tcpSocket\":{\"port\":9000}},\"replicaCount\":1,\"resources\":{},\"service\":{\"port\":9000,\"type\":\"ClusterIP\"},\"sidecars\":[],\"tolerations\":[]},\"worker\":{\"default\":{\"affinity\":{},\"autoscaling\":{\"enabled\":false,\"maxReplicas\":3,\"minReplicas\":1,\"targetCPU\":75,\"targetMemory\":75},\"envVars\":[],\"initContainers\":[],\"livenessProbe\":{\"override\":false,\"probe\":{}},\"nodeSelector\":{},\"readinessProbe\":{\"override\":false,\"probe\":{}},\"replicaCount\":1,\"resources\":{},\"sidecars\":[],\"tolerations\":[]},\"defaultTopologySpread\":{\"maxSkew\":1,\"topologyKey\":\"kubernetes.io/hostname\",\"whenUnsatisfiable\":\"DoNotSchedule\"},\"gunicorn\":{\"affinity\":{},\"args\":[],\"autoscaling\":{\"enabled\":false,\"maxReplicas\":3,\"minReplicas\":1,\"targetCPU\":75,\"targetMemory\":75},\"envVars\":[],\"initContainers\":[],\"livenessProbe\":{\"initialDelaySeconds\":5,\"periodSeconds\":10,\"tcpSocket\":{\"port\":8000}},\"nodeSelector\":{},\"readinessProbe\":{\"initialDelaySeconds\":5,\"periodSeconds\":10,\"tcpSocket\":{\"port\":8000}},\"replicaCount\":1,\"resources\":{},\"service\":{\"port\":8000,\"type\":\"ClusterIP\"},\"sidecars\":[],\"tolerations\":[]},\"healthProbe\":\"exec:\\n  command:\\n    - bash\\n    - -c\\n    - echo \\\"Ping backing services\\\";\\n    {{- if .Values.mariadb.enabled }}\\n    {{- if eq .Values.mariadb.architecture \\\"replication\\\" }}\\n    - wait-for-it {{ .Release.Name }}-mariadb-primary:{{ .Values.mariadb.primary.service.ports.mysql }} -t 1;\\n    {{- else }}\\n    - wait-for-it {{ .Release.Name }}-mariadb:{{ .Values.mariadb.primary.service.ports.mysql }} -t 1;\\n    {{- end }}\\n    {{- else if .Values.dbHost }}\\n    - wait-for-it {{ .Values.dbHost }}:{{ .Values.mariadb.primary.service.ports.mysql }} -t 1;\\n    {{- end }}\\n    {{- if index .Values \\\"redis-cache\\\" \\\"host\\\" }}\\n    - wait-for-it {{ .Release.Name }}-redis-cache-master:{{ index .Values \\\"redis-cache\\\" \\\"master\\\" \\\"containerPorts\\\" \\\"redis\\\" }} -t 1;\\n    {{- else if index .Values \\\"redis-cache\\\" \\\"host\\\" }}\\n    - wait-for-it {{ index .Values \\\"redis-cache\\\" \\\"host\\\" }} -t 1;\\n    {{- end }}\\n    {{- if index .Values \\\"redis-queue\\\" \\\"host\\\" }}\\n    - wait-for-it {{ .Release.Name }}-redis-queue-master:{{ index .Values \\\"redis-queue\\\" \\\"master\\\" \\\"containerPorts\\\" \\\"redis\\\" }} -t 1;\\n    {{- else if index .Values \\\"redis-queue\\\" \\\"host\\\" }}\\n    - wait-for-it {{ index .Values \\\"redis-queue\\\" \\\"host\\\" }} -t 1;\\n    {{- end }}\\n    {{- if .Values.postgresql.host }}\\n    - wait-for-it {{ .Values.postgresql.host }}:{{ .Values.postgresql.primary.service.ports.postgresql }} -t 1;\\n    {{- else if .Values.postgresql.enabled }}\\n    - wait-for-it {{ .Release.Name }}-postgresql:{{ .Values.postgresql.primary.service.ports.postgresql }} -t 1;\\n    {{- end }}\\ninitialDelaySeconds: 15\\nperiodSeconds: 5\\n\",\"long\":{\"affinity\":{},\"autoscaling\":{\"enabled\":false,\"maxReplicas\":3,\"minReplicas\":1,\"targetCPU\":75,\"targetMemory\":75},\"envVars\":[],\"initContainers\":[],\"livenessProbe\":{\"override\":false,\"probe\":{}},\"nodeSelector\":{},\"readinessProbe\":{\"override\":false,\"probe\":{}},\"replicaCount\":1,\"resources\":{},\"sidecars\":[],\"tolerations\":[]},\"scheduler\":{\"envVars\":[],\"initContainers\":[],\"livenessProbe\":{\"override\":true,\"probe\":{\"exec\":{\"command\":[\"bash\",\"-c\",\"pgrep -f \\\"bench schedule\\\"\"]},\"failureThreshold\":3,\"initialDelaySeconds\":30,\"periodSeconds\":10,\"timeoutSeconds\":5}},\"readinessProbe\":{\"override\":true,\"probe\":{\"exec\":{\"command\":[\"bash\",\"-c\",\"pgrep -f \\\"bench schedule\\\"\"]},\"failureThreshold\":3,\"initialDelaySeconds\":30,\"periodSeconds\":10,\"timeoutSeconds\":5}},\"replicaCount\":1,\"resources\":{\"limits\":{\"cpu\":\"200m\",\"memory\":\"512Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"256Mi\"}},\"sidecars\":[]},\"short\":{\"affinity\":{},\"autoscaling\":{\"enabled\":false,\"maxReplicas\":3,\"minReplicas\":1,\"targetCPU\":75,\"targetMemory\":75},\"envVars\":[],\"initContainers\":[],\"livenessProbe\":{\"override\":false,\"probe\":{}},\"nodeSelector\":{},\"readinessProbe\":{\"override\":false,\"probe\":{}},\"replicaCount\":1,\"resources\":{},\"sidecars\":[],\"tolerations\":[]}}}",
                "version": "7.0.146"
              }
            ],
            "name": "frappe-bench",
            "namespace": "erpnext",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://helm.erpnext.com",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "nginx.livenessProbe.initialDelaySeconds",
                "type": "",
                "value": "60"
              },
              {
                "name": "nginx.readinessProbe.initialDelaySeconds",
                "type": "",
                "value": "60"
              },
              {
                "name": "persistence.worker.storageClass",
                "type": "",
                "value": "nfs"
              }
            ],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "failed",
            "timeout": 900,
            "upgrade_install": null,
            "values": [
              "# Default values for erpnext.\n# This is a YAML-formatted file.\n# Declare variables to be passed into your templates.\n\n# Configure external database host\ndbHost: \"mariadb.database.svc.cluster.local\"\ndbPort: 3306\ndbRootUser: \"root\"\ndbRootPassword: \"SMNGg8X66YhT7UfW\"\ndbRds: false\n\nimage:\n  repository: mabecenter/erpnext\n  tag: 0.0.1-42b2b99\n  pullPolicy: IfNotPresent\n\npersistence:\n  worker:\n    enabled: true\n    size: 8Gi\n    storageClass: \"nfs\"\n    accessModes:\n    - ReadWriteMany\n  logs:\n    enabled: true\n    size: 8Gi\n    storageClass: \"nfs\"\n    accessModes:\n    - ReadWriteMany\n\nnginx:\n  replicaCount: 1\n  autoscaling:\n    enabled: true\n    minReplicas: 1\n    maxReplicas: 3\n    targetCPU: 75\n    targetMemory: 75\n  # config: |\n  #   # custom conf /etc/nginx/conf.d/default.conf\n  environment:\n    upstreamRealIPAddress: \"127.0.0.1\"\n    upstreamRealIPRecursive: \"off\"\n    upstreamRealIPHeader: \"X-Forwarded-For\"\n    frappeSiteNameHeader: \"$host\"\n  livenessProbe:\n    tcpSocket:\n      port: 8080\n    initialDelaySeconds: 5\n    periodSeconds: 10\n  readinessProbe:\n    tcpSocket:\n      port: 8080\n    initialDelaySeconds: 5\n    periodSeconds: 10\n  service:\n    type: ClusterIP\n    port: 8080\n  resources: {}\n\n  \n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n  # Custom topologySpreadConstraints (uncomment and modify to override defaults)\n  # topologySpreadConstraints:\n  #   - maxSkew: 2\n  #     topologyKey: failure-domain.beta.kubernetes.io/zone\n  #     whenUnsatisfiable: ScheduleAnyway\n\n  # Default topologySpreadConstraints (used if topologySpreadConstraints is not set)\n  defaultTopologySpread:\n    maxSkew: 1\n    topologyKey: kubernetes.io/hostname\n    whenUnsatisfiable: DoNotSchedule\n  envVars: []\n  initContainers: []\n  sidecars: []\n\nworker:\n  gunicorn:\n    replicaCount: 1\n    autoscaling:\n      enabled: false\n      minReplicas: 1\n      maxReplicas: 3\n      targetCPU: 75\n      targetMemory: 75\n    livenessProbe:\n      tcpSocket:\n        port: 8000\n      initialDelaySeconds: 5\n      periodSeconds: 10\n    readinessProbe:\n      tcpSocket:\n        port: 8000\n      initialDelaySeconds: 5\n      periodSeconds: 10\n    service:\n      type: ClusterIP\n      port: 8000\n    resources: {}\n    nodeSelector: {}\n    tolerations: []\n    affinity: {}\n    args: []\n    envVars: []\n    initContainers: []\n    sidecars: []\n\n  default:\n    replicaCount: 1\n    autoscaling:\n      enabled: false\n      minReplicas: 1\n      maxReplicas: 3\n      targetCPU: 75\n      targetMemory: 75\n    resources: {}\n    nodeSelector: {}\n    tolerations: []\n    affinity: {}\n    livenessProbe:\n      override: false\n      probe: {}\n    readinessProbe:\n      override: false\n      probe: {}\n    envVars: []\n    initContainers: []\n    sidecars: []\n\n  short:\n    replicaCount: 1\n    autoscaling:\n      enabled: false\n      minReplicas: 1\n      maxReplicas: 3\n      targetCPU: 75\n      targetMemory: 75\n    resources: {}\n    nodeSelector: {}\n    tolerations: []\n    affinity: {}\n    livenessProbe:\n      override: false\n      probe: {}\n    readinessProbe:\n      override: false\n      probe: {}\n    envVars: []\n    initContainers: []\n    sidecars: []\n\n  long:\n    replicaCount: 1\n    autoscaling:\n      enabled: false\n      minReplicas: 1\n      maxReplicas: 3\n      targetCPU: 75\n      targetMemory: 75\n    resources: {}\n    nodeSelector: {}\n    tolerations: []\n    affinity: {}\n    livenessProbe:\n      override: false\n      probe: {}\n    readinessProbe:\n      override: false\n      probe: {}\n    envVars: []\n    initContainers: []\n    sidecars: []\n\n  scheduler:\n    replicaCount: 1\n    resources:\n      requests:\n        memory: \"256Mi\"\n        cpu: \"100m\"\n      limits:\n        memory: \"512Mi\"\n        cpu: \"200m\"\n    livenessProbe:\n      override: true\n      probe:\n        exec:\n          command:\n            - bash\n            - -c\n            - pgrep -f \"bench schedule\"\n        initialDelaySeconds: 30\n        periodSeconds: 10\n        timeoutSeconds: 5\n        failureThreshold: 3\n    readinessProbe:\n      override: true\n      probe:\n        exec:\n          command:\n            - bash\n            - -c\n            - pgrep -f \"bench schedule\"\n        initialDelaySeconds: 30\n        periodSeconds: 10\n        timeoutSeconds: 5\n        failureThreshold: 3\n    envVars: []\n    initContainers: []\n    sidecars: []\n\n\n  # Custom topologySpreadConstraints (uncomment and modify to override defaults)\n  # topologySpreadConstraints:\n  #   - maxSkew: 2\n  #     topologyKey: failure-domain.beta.kubernetes.io/zone\n  #     whenUnsatisfiable: ScheduleAnyway\n\n  # Default topologySpreadConstraints (used if topologySpreadConstraints is not set)\n  defaultTopologySpread:\n    maxSkew: 1\n    topologyKey: kubernetes.io/hostname\n    whenUnsatisfiable: DoNotSchedule\n\n\n  healthProbe: |\n    exec:\n      command:\n        - bash\n        - -c\n        - echo \"Ping backing services\";\n        {{- if .Values.mariadb.enabled }}\n        {{- if eq .Values.mariadb.architecture \"replication\" }}\n        - wait-for-it {{ .Release.Name }}-mariadb-primary:{{ .Values.mariadb.primary.service.ports.mysql }} -t 1;\n        {{- else }}\n        - wait-for-it {{ .Release.Name }}-mariadb:{{ .Values.mariadb.primary.service.ports.mysql }} -t 1;\n        {{- end }}\n        {{- else if .Values.dbHost }}\n        - wait-for-it {{ .Values.dbHost }}:{{ .Values.mariadb.primary.service.ports.mysql }} -t 1;\n        {{- end }}\n        {{- if index .Values \"redis-cache\" \"host\" }}\n        - wait-for-it {{ .Release.Name }}-redis-cache-master:{{ index .Values \"redis-cache\" \"master\" \"containerPorts\" \"redis\" }} -t 1;\n        {{- else if index .Values \"redis-cache\" \"host\" }}\n        - wait-for-it {{ index .Values \"redis-cache\" \"host\" }} -t 1;\n        {{- end }}\n        {{- if index .Values \"redis-queue\" \"host\" }}\n        - wait-for-it {{ .Release.Name }}-redis-queue-master:{{ index .Values \"redis-queue\" \"master\" \"containerPorts\" \"redis\" }} -t 1;\n        {{- else if index .Values \"redis-queue\" \"host\" }}\n        - wait-for-it {{ index .Values \"redis-queue\" \"host\" }} -t 1;\n        {{- end }}\n        {{- if .Values.postgresql.host }}\n        - wait-for-it {{ .Values.postgresql.host }}:{{ .Values.postgresql.primary.service.ports.postgresql }} -t 1;\n        {{- else if .Values.postgresql.enabled }}\n        - wait-for-it {{ .Release.Name }}-postgresql:{{ .Values.postgresql.primary.service.ports.postgresql }} -t 1;\n        {{- end }}\n    initialDelaySeconds: 15\n    periodSeconds: 5\n\nsocketio:\n  replicaCount: 1\n  autoscaling:\n    enabled: true\n    minReplicas: 1\n    maxReplicas: 3\n    targetCPU: 75\n    targetMemory: 75\n  livenessProbe:\n    tcpSocket:\n      port: 9000\n    initialDelaySeconds: 5\n    periodSeconds: 10\n  readinessProbe:\n    tcpSocket:\n      port: 9000\n    initialDelaySeconds: 5\n    periodSeconds: 10\n  resources: {}\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n  service:\n    type: ClusterIP\n    port: 9000\n  envVars: []\n  initContainers: []\n  sidecars: []\n\n# Ingress\ningress:\n    ingressName: \"erpnext-ingress\"\n    className: nginx\n    enabled: true\n    annotations: {}\n    hosts:\n    - host: erp.cluster.local\n      paths:\n        - path: /\n          pathType: Prefix\njobs:\n  volumePermissions:\n    # jobName: \"\"\n    enabled: false\n    backoffLimit: 0\n    resources: {}\n    nodeSelector: {}\n    tolerations: []\n    affinity: {}\n\n  configure:\n    # jobName: \"\"\n    enabled: true\n    fixVolume: true\n    backoffLimit: 0\n    resources: {}\n    nodeSelector: {}\n    tolerations: []\n    affinity: {}\n    envVars: []\n    command: []\n    args: []\n\n  createSite:\n    # jobName: \"\"\n    enabled: true\n    forceCreate: false\n    siteName: \"erp.cluster.local\"\n    adminPassword: \"changeit\"\n    installApps:\n    - \"erpnext\"\n    - \"mabecenter\"\n    dbType: \"mariadb\"\n    backoffLimit: 0\n    resources: {}\n    nodeSelector: {}\n    tolerations: []\n    affinity: {}\n\n  dropSite:\n    # jobName: \"\"\n    enabled: false\n    forced: false\n    siteName: \"erp.cluster.local\"\n    backoffLimit: 0\n    resources: {}\n    nodeSelector: {}\n    tolerations: []\n    affinity: {}\n\n  backup:\n    # jobName: \"\"\n    enabled: true\n    siteName: \"erp.cluster.local\"\n    withFiles: true\n    backoffLimit: 0\n    resources: {}\n    nodeSelector: {}\n    tolerations: []\n    affinity: {}\n\n  migrate:\n    # jobName: \"\"\n    enabled: true\n    siteName: \"erp.cluster.local\"\n    skipFailing: false\n    backoffLimit: 0\n    resources: {}\n    nodeSelector: {}\n    tolerations: []\n    affinity: {}\n\n  custom:\n    enabled: false\n    jobName: \"\"\n    labels: {}\n    backoffLimit: 0\n    initContainers: []\n    containers: []\n    restartPolicy: Never\n    volumes: []\n    nodeSelector: {}\n    affinity: {}\n    tolerations: []\n\nimagePullSecrets: []\nnameOverride: \"\"\nfullnameOverride: \"\"\n\nserviceAccount:\n  # Specifies whether a service account should be created\n  create: true\n\npodSecurityContext:\n  supplementalGroups: [1000]\n\nsecurityContext:\n  capabilities:\n    add:\n    - CAP_CHOWN\n  # readOnlyRootFilesystem: true\n  # runAsNonRoot: true\n  # runAsUser: 1000\n\nredis-cache:\n  # https://github.com/bitnami/charts/tree/master/bitnami/redis\n  enabled: true\n  # host: \"\"\n  architecture: standalone\n  auth:\n    enabled: false\n    sentinal: false\n  master:\n    containerPorts:\n      redis: 6379\n    persistence:\n      enabled: false\n\nredis-queue:\n  # https://github.com/bitnami/charts/tree/master/bitnami/redis\n  enabled: true\n  # host: \"\"\n  architecture: standalone\n  auth:\n    enabled: false\n    sentinal: false\n  master:\n    containerPorts:\n      redis: 6379\n    persistence:\n      enabled: false\n\nmariadb:\n  # https://github.com/bitnami/charts/tree/master/bitnami/mariadb\n  enabled: false\n  auth:\n    rootPassword: \"changeit\"\n    username: \"erpnext\"\n    password: \"changeit\"\n    replicationPassword: \"changeit\"\n  primary:\n    service:\n      ports:\n        mysql: 3306\n    extraFlags: \u003e-\n      --skip-character-set-client-handshake\n      --skip-innodb-read-only-compressed\n      --character-set-server=utf8mb4\n      --collation-server=utf8mb4_unicode_ci\n\npostgresql:\n  # https://github.com/bitnami/charts/tree/master/bitnami/postgresql\n  enabled: false\n  # host: \"\"\n  auth:\n    username: \"postgres\"\n    postgresPassword: \"changeit\"\n  primary:\n    service:\n      ports:\n        postgresql: 5432\n"
            ],
            "verify": false,
            "version": "7.0.146",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.argocd",
            "helm_release.argocd-apps",
            "helm_release.nfs_server",
            "kubernetes_manifest.argocd_application_mariadb",
            "kubernetes_namespace.argocd",
            "kubernetes_namespace.database",
            "kubernetes_namespace.erpnext",
            "kubernetes_namespace.nfs",
            "kubernetes_secret.mariadb_credentials",
            "time_sleep.wait_for_argocd",
            "time_sleep.wait_for_services"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "nfs_server",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "nfs-server-provisioner",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "nfs-server",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "4.0.8",
                "chart": "nfs-server-provisioner",
                "first_deployed": 1734469589,
                "last_deployed": 1734469589,
                "name": "nfs-server",
                "namespace": "nfs",
                "notes": "The NFS Provisioner service has now been installed.\n\nA storage class named 'nfs' has now been created\nand is available to provision dynamic volumes.\n\nYou can use this storageclass by creating a `PersistentVolumeClaim` with the\ncorrect storageClassName attribute. For example:\n\n    ---\n    kind: PersistentVolumeClaim\n    apiVersion: v1\n    metadata:\n      name: test-dynamic-volume-claim\n    spec:\n      storageClassName: \"nfs\"\n      accessModes:\n        - ReadWriteOnce\n      resources:\n        requests:\n          storage: 100Mi\n\n",
                "revision": 1,
                "values": "{\"persistence\":{\"enabled\":true,\"size\":\"8Gi\"},\"storageClass\":{\"mountOptions\":[\"vers=4.1\"],\"name\":\"nfs\"}}",
                "version": "1.8.0"
              }
            ],
            "name": "nfs-server",
            "namespace": "nfs",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://kubernetes-sigs.github.io/nfs-ganesha-server-and-external-provisioner",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "persistence.enabled",
                "type": "",
                "value": "true"
              },
              {
                "name": "persistence.size",
                "type": "",
                "value": "8Gi"
              },
              {
                "name": "storageClass.mountOptions[0]",
                "type": "",
                "value": "vers=4.1"
              },
              {
                "name": "storageClass.name",
                "type": "",
                "value": "nfs"
              }
            ],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": null,
            "verify": false,
            "version": "1.8.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_namespace.nfs"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_ingress_v1",
      "name": "argocd-ingress",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "argocd/argocd-server-ingress",
            "metadata": [
              {
                "annotations": {
                  "alb.ingress.kubernetes.io/backend-protocol": "HTTPS",
                  "alb.ingress.kubernetes.io/certificate-arn": "arn:aws:acm:eu-west-1:659192515497:certificate/e4958d34-7ce7-45d6-84e4-accd35b5edb8",
                  "alb.ingress.kubernetes.io/conditions.argogrpc": "[{\"field\":\"http-header\",\"httpHeaderConfig\":{\"httpHeaderName\": \"Content-Type\", \"values\":[\"application/grpc\"]}}]",
                  "alb.ingress.kubernetes.io/group.name": "dev",
                  "alb.ingress.kubernetes.io/healthcheck-path": "/healthz",
                  "alb.ingress.kubernetes.io/listen-ports": "[{\"HTTPS\": 443}]",
                  "alb.ingress.kubernetes.io/load-balancer-name": "your-alb-name",
                  "alb.ingress.kubernetes.io/scheme": "internet-facing",
                  "alb.ingress.kubernetes.io/target-type": "ip",
                  "kubernetes.io/ingress.class": "alb"
                },
                "generate_name": "",
                "generation": 1,
                "labels": null,
                "name": "argocd-server-ingress",
                "namespace": "argocd",
                "resource_version": "893143",
                "uid": "72e4169c-6555-4b96-ab8c-c8c978232866"
              }
            ],
            "spec": [
              {
                "default_backend": [],
                "ingress_class_name": "",
                "rule": [
                  {
                    "host": "argocd.cluster.local",
                    "http": [
                      {
                        "path": [
                          {
                            "backend": [
                              {
                                "resource": [],
                                "service": [
                                  {
                                    "name": "argogrpc",
                                    "port": [
                                      {
                                        "name": "",
                                        "number": 443
                                      }
                                    ]
                                  }
                                ]
                              }
                            ],
                            "path": "/",
                            "path_type": "Prefix"
                          },
                          {
                            "backend": [
                              {
                                "resource": [],
                                "service": [
                                  {
                                    "name": "argocd-server",
                                    "port": [
                                      {
                                        "name": "",
                                        "number": 443
                                      }
                                    ]
                                  }
                                ]
                              }
                            ],
                            "path": "/",
                            "path_type": "Prefix"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "tls": [
                  {
                    "hosts": [
                      "argocd.cluster.local"
                    ],
                    "secret_name": ""
                  }
                ]
              }
            ],
            "status": [
              {
                "load_balancer": [
                  {
                    "ingress": []
                  }
                ]
              }
            ],
            "timeouts": null,
            "wait_for_load_balancer": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "kubernetes_namespace.argocd"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_manifest",
      "name": "argocd_application_mariadb",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "computed_fields": null,
            "field_manager": [],
            "manifest": {
              "value": {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "Application",
                "metadata": {
                  "name": "mariadb",
                  "namespace": "argocd"
                },
                "spec": {
                  "destination": {
                    "namespace": "database",
                    "server": "https://kubernetes.default.svc"
                  },
                  "project": "default",
                  "source": {
                    "chart": "mariadb",
                    "helm": {
                      "releaseName": "mariadb",
                      "values": "\"architecture\": \"standalone\"\n\"auth\":\n  \"database\": \"geekcity\"\n  \"existingSecret\": \"mariadb-credentials\"\n  \"username\": \"ben.wangz\"\n\"primary\":\n  \"extraFlags\": \"--character-set-server=utf8mb4 --collation-server=utf8mb4_bin\"\n  \"persistence\":\n    \"enabled\": false\n\"secondary\":\n  \"persistence\":\n    \"enabled\": false\n  \"replicaCount\": 1\n"
                    },
                    "repoURL": "https://charts.bitnami.com/bitnami",
                    "targetRevision": "16.3.2"
                  },
                  "syncPolicy": {
                    "automated": {
                      "prune": true,
                      "selfHeal": true
                    },
                    "syncOptions": [
                      "CreateNamespace=true",
                      "ServerSideApply=true",
                      "AllowEmpty=true"
                    ]
                  }
                }
              },
              "type": [
                "object",
                {
                  "apiVersion": "string",
                  "kind": "string",
                  "metadata": [
                    "object",
                    {
                      "name": "string",
                      "namespace": "string"
                    }
                  ],
                  "spec": [
                    "object",
                    {
                      "destination": [
                        "object",
                        {
                          "namespace": "string",
                          "server": "string"
                        }
                      ],
                      "project": "string",
                      "source": [
                        "object",
                        {
                          "chart": "string",
                          "helm": [
                            "object",
                            {
                              "releaseName": "string",
                              "values": "string"
                            }
                          ],
                          "repoURL": "string",
                          "targetRevision": "string"
                        }
                      ],
                      "syncPolicy": [
                        "object",
                        {
                          "automated": [
                            "object",
                            {
                              "prune": "bool",
                              "selfHeal": "bool"
                            }
                          ],
                          "syncOptions": [
                            "tuple",
                            [
                              "string",
                              "string",
                              "string"
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "object": {
              "value": {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "Application",
                "metadata": {
                  "annotations": null,
                  "creationTimestamp": null,
                  "deletionGracePeriodSeconds": null,
                  "deletionTimestamp": null,
                  "finalizers": null,
                  "generateName": null,
                  "generation": null,
                  "labels": null,
                  "managedFields": null,
                  "name": "mariadb",
                  "namespace": "argocd",
                  "ownerReferences": null,
                  "resourceVersion": null,
                  "selfLink": null,
                  "uid": null
                },
                "operation": {
                  "info": null,
                  "initiatedBy": {
                    "automated": null,
                    "username": null
                  },
                  "retry": {
                    "backoff": {
                      "duration": null,
                      "factor": null,
                      "maxDuration": null
                    },
                    "limit": null
                  },
                  "sync": {
                    "dryRun": null,
                    "manifests": null,
                    "prune": null,
                    "resources": null,
                    "revision": null,
                    "revisions": null,
                    "source": {
                      "chart": null,
                      "directory": {
                        "exclude": null,
                        "include": null,
                        "jsonnet": {
                          "extVars": null,
                          "libs": null,
                          "tlas": null
                        },
                        "recurse": null
                      },
                      "helm": {
                        "fileParameters": null,
                        "ignoreMissingValueFiles": null,
                        "parameters": null,
                        "passCredentials": null,
                        "releaseName": null,
                        "skipCrds": null,
                        "valueFiles": null,
                        "values": null,
                        "valuesObject": null,
                        "version": null
                      },
                      "kustomize": {
                        "commonAnnotations": null,
                        "commonAnnotationsEnvsubst": null,
                        "commonLabels": null,
                        "forceCommonAnnotations": null,
                        "forceCommonLabels": null,
                        "images": null,
                        "namePrefix": null,
                        "nameSuffix": null,
                        "namespace": null,
                        "patches": null,
                        "replicas": null,
                        "version": null
                      },
                      "path": null,
                      "plugin": {
                        "env": null,
                        "name": null,
                        "parameters": null
                      },
                      "ref": null,
                      "repoURL": null,
                      "targetRevision": null
                    },
                    "sources": null,
                    "syncOptions": null,
                    "syncStrategy": {
                      "apply": {
                        "force": null
                      },
                      "hook": {
                        "force": null
                      }
                    }
                  }
                },
                "spec": {
                  "destination": {
                    "name": null,
                    "namespace": "database",
                    "server": "https://kubernetes.default.svc"
                  },
                  "ignoreDifferences": null,
                  "info": null,
                  "project": "default",
                  "revisionHistoryLimit": null,
                  "source": {
                    "chart": "mariadb",
                    "directory": {
                      "exclude": null,
                      "include": null,
                      "jsonnet": {
                        "extVars": null,
                        "libs": null,
                        "tlas": null
                      },
                      "recurse": null
                    },
                    "helm": {
                      "fileParameters": null,
                      "ignoreMissingValueFiles": null,
                      "parameters": null,
                      "passCredentials": null,
                      "releaseName": "mariadb",
                      "skipCrds": null,
                      "valueFiles": null,
                      "values": "\"architecture\": \"standalone\"\n\"auth\":\n  \"database\": \"geekcity\"\n  \"existingSecret\": \"mariadb-credentials\"\n  \"username\": \"ben.wangz\"\n\"primary\":\n  \"extraFlags\": \"--character-set-server=utf8mb4 --collation-server=utf8mb4_bin\"\n  \"persistence\":\n    \"enabled\": false\n\"secondary\":\n  \"persistence\":\n    \"enabled\": false\n  \"replicaCount\": 1\n",
                      "valuesObject": null,
                      "version": null
                    },
                    "kustomize": {
                      "commonAnnotations": null,
                      "commonAnnotationsEnvsubst": null,
                      "commonLabels": null,
                      "forceCommonAnnotations": null,
                      "forceCommonLabels": null,
                      "images": null,
                      "namePrefix": null,
                      "nameSuffix": null,
                      "namespace": null,
                      "patches": null,
                      "replicas": null,
                      "version": null
                    },
                    "path": null,
                    "plugin": {
                      "env": null,
                      "name": null,
                      "parameters": null
                    },
                    "ref": null,
                    "repoURL": "https://charts.bitnami.com/bitnami",
                    "targetRevision": "16.3.2"
                  },
                  "sources": null,
                  "syncPolicy": {
                    "automated": {
                      "allowEmpty": null,
                      "prune": true,
                      "selfHeal": true
                    },
                    "managedNamespaceMetadata": {
                      "annotations": null,
                      "labels": null
                    },
                    "retry": {
                      "backoff": {
                        "duration": null,
                        "factor": null,
                        "maxDuration": null
                      },
                      "limit": null
                    },
                    "syncOptions": [
                      "CreateNamespace=true",
                      "ServerSideApply=true",
                      "AllowEmpty=true"
                    ]
                  }
                }
              },
              "type": [
                "object",
                {
                  "apiVersion": "string",
                  "kind": "string",
                  "metadata": [
                    "object",
                    {
                      "annotations": [
                        "map",
                        "string"
                      ],
                      "creationTimestamp": "string",
                      "deletionGracePeriodSeconds": "number",
                      "deletionTimestamp": "string",
                      "finalizers": [
                        "list",
                        "string"
                      ],
                      "generateName": "string",
                      "generation": "number",
                      "labels": [
                        "map",
                        "string"
                      ],
                      "managedFields": [
                        "tuple",
                        [
                          [
                            "object",
                            {
                              "apiVersion": "string",
                              "fieldsType": "string",
                              "fieldsV1": "dynamic",
                              "manager": "string",
                              "operation": "string",
                              "subresource": "string",
                              "time": "string"
                            }
                          ]
                        ]
                      ],
                      "name": "string",
                      "namespace": "string",
                      "ownerReferences": [
                        "list",
                        [
                          "object",
                          {
                            "apiVersion": "string",
                            "blockOwnerDeletion": "bool",
                            "controller": "bool",
                            "kind": "string",
                            "name": "string",
                            "uid": "string"
                          }
                        ]
                      ],
                      "resourceVersion": "string",
                      "selfLink": "string",
                      "uid": "string"
                    }
                  ],
                  "operation": [
                    "object",
                    {
                      "info": [
                        "list",
                        [
                          "object",
                          {
                            "name": "string",
                            "value": "string"
                          }
                        ]
                      ],
                      "initiatedBy": [
                        "object",
                        {
                          "automated": "bool",
                          "username": "string"
                        }
                      ],
                      "retry": [
                        "object",
                        {
                          "backoff": [
                            "object",
                            {
                              "duration": "string",
                              "factor": "number",
                              "maxDuration": "string"
                            }
                          ],
                          "limit": "number"
                        }
                      ],
                      "sync": [
                        "object",
                        {
                          "dryRun": "bool",
                          "manifests": [
                            "list",
                            "string"
                          ],
                          "prune": "bool",
                          "resources": [
                            "list",
                            [
                              "object",
                              {
                                "group": "string",
                                "kind": "string",
                                "name": "string",
                                "namespace": "string"
                              }
                            ]
                          ],
                          "revision": "string",
                          "revisions": [
                            "list",
                            "string"
                          ],
                          "source": [
                            "object",
                            {
                              "chart": "string",
                              "directory": [
                                "object",
                                {
                                  "exclude": "string",
                                  "include": "string",
                                  "jsonnet": [
                                    "object",
                                    {
                                      "extVars": [
                                        "list",
                                        [
                                          "object",
                                          {
                                            "code": "bool",
                                            "name": "string",
                                            "value": "string"
                                          }
                                        ]
                                      ],
                                      "libs": [
                                        "list",
                                        "string"
                                      ],
                                      "tlas": [
                                        "list",
                                        [
                                          "object",
                                          {
                                            "code": "bool",
                                            "name": "string",
                                            "value": "string"
                                          }
                                        ]
                                      ]
                                    }
                                  ],
                                  "recurse": "bool"
                                }
                              ],
                              "helm": [
                                "object",
                                {
                                  "fileParameters": [
                                    "list",
                                    [
                                      "object",
                                      {
                                        "name": "string",
                                        "path": "string"
                                      }
                                    ]
                                  ],
                                  "ignoreMissingValueFiles": "bool",
                                  "parameters": [
                                    "list",
                                    [
                                      "object",
                                      {
                                        "forceString": "bool",
                                        "name": "string",
                                        "value": "string"
                                      }
                                    ]
                                  ],
                                  "passCredentials": "bool",
                                  "releaseName": "string",
                                  "skipCrds": "bool",
                                  "valueFiles": [
                                    "list",
                                    "string"
                                  ],
                                  "values": "string",
                                  "valuesObject": "dynamic",
                                  "version": "string"
                                }
                              ],
                              "kustomize": [
                                "object",
                                {
                                  "commonAnnotations": [
                                    "map",
                                    "string"
                                  ],
                                  "commonAnnotationsEnvsubst": "bool",
                                  "commonLabels": [
                                    "map",
                                    "string"
                                  ],
                                  "forceCommonAnnotations": "bool",
                                  "forceCommonLabels": "bool",
                                  "images": [
                                    "list",
                                    "string"
                                  ],
                                  "namePrefix": "string",
                                  "nameSuffix": "string",
                                  "namespace": "string",
                                  "patches": [
                                    "list",
                                    [
                                      "object",
                                      {
                                        "options": [
                                          "map",
                                          "bool"
                                        ],
                                        "patch": "string",
                                        "path": "string",
                                        "target": [
                                          "object",
                                          {
                                            "annotationSelector": "string",
                                            "group": "string",
                                            "kind": "string",
                                            "labelSelector": "string",
                                            "name": "string",
                                            "namespace": "string",
                                            "version": "string"
                                          }
                                        ]
                                      }
                                    ]
                                  ],
                                  "replicas": [
                                    "list",
                                    [
                                      "object",
                                      {
                                        "count": "string",
                                        "name": "string"
                                      }
                                    ]
                                  ],
                                  "version": "string"
                                }
                              ],
                              "path": "string",
                              "plugin": [
                                "object",
                                {
                                  "env": [
                                    "list",
                                    [
                                      "object",
                                      {
                                        "name": "string",
                                        "value": "string"
                                      }
                                    ]
                                  ],
                                  "name": "string",
                                  "parameters": [
                                    "list",
                                    [
                                      "object",
                                      {
                                        "array": [
                                          "list",
                                          "string"
                                        ],
                                        "map": [
                                          "map",
                                          "string"
                                        ],
                                        "name": "string",
                                        "string": "string"
                                      }
                                    ]
                                  ]
                                }
                              ],
                              "ref": "string",
                              "repoURL": "string",
                              "targetRevision": "string"
                            }
                          ],
                          "sources": [
                            "tuple",
                            [
                              [
                                "object",
                                {
                                  "chart": "string",
                                  "directory": [
                                    "object",
                                    {
                                      "exclude": "string",
                                      "include": "string",
                                      "jsonnet": [
                                        "object",
                                        {
                                          "extVars": [
                                            "list",
                                            [
                                              "object",
                                              {
                                                "code": "bool",
                                                "name": "string",
                                                "value": "string"
                                              }
                                            ]
                                          ],
                                          "libs": [
                                            "list",
                                            "string"
                                          ],
                                          "tlas": [
                                            "list",
                                            [
                                              "object",
                                              {
                                                "code": "bool",
                                                "name": "string",
                                                "value": "string"
                                              }
                                            ]
                                          ]
                                        }
                                      ],
                                      "recurse": "bool"
                                    }
                                  ],
                                  "helm": [
                                    "object",
                                    {
                                      "fileParameters": [
                                        "list",
                                        [
                                          "object",
                                          {
                                            "name": "string",
                                            "path": "string"
                                          }
                                        ]
                                      ],
                                      "ignoreMissingValueFiles": "bool",
                                      "parameters": [
                                        "list",
                                        [
                                          "object",
                                          {
                                            "forceString": "bool",
                                            "name": "string",
                                            "value": "string"
                                          }
                                        ]
                                      ],
                                      "passCredentials": "bool",
                                      "releaseName": "string",
                                      "skipCrds": "bool",
                                      "valueFiles": [
                                        "list",
                                        "string"
                                      ],
                                      "values": "string",
                                      "valuesObject": "dynamic",
                                      "version": "string"
                                    }
                                  ],
                                  "kustomize": [
                                    "object",
                                    {
                                      "commonAnnotations": [
                                        "map",
                                        "string"
                                      ],
                                      "commonAnnotationsEnvsubst": "bool",
                                      "commonLabels": [
                                        "map",
                                        "string"
                                      ],
                                      "forceCommonAnnotations": "bool",
                                      "forceCommonLabels": "bool",
                                      "images": [
                                        "list",
                                        "string"
                                      ],
                                      "namePrefix": "string",
                                      "nameSuffix": "string",
                                      "namespace": "string",
                                      "patches": [
                                        "list",
                                        [
                                          "object",
                                          {
                                            "options": [
                                              "map",
                                              "bool"
                                            ],
                                            "patch": "string",
                                            "path": "string",
                                            "target": [
                                              "object",
                                              {
                                                "annotationSelector": "string",
                                                "group": "string",
                                                "kind": "string",
                                                "labelSelector": "string",
                                                "name": "string",
                                                "namespace": "string",
                                                "version": "string"
                                              }
                                            ]
                                          }
                                        ]
                                      ],
                                      "replicas": [
                                        "list",
                                        [
                                          "object",
                                          {
                                            "count": "string",
                                            "name": "string"
                                          }
                                        ]
                                      ],
                                      "version": "string"
                                    }
                                  ],
                                  "path": "string",
                                  "plugin": [
                                    "object",
                                    {
                                      "env": [
                                        "list",
                                        [
                                          "object",
                                          {
                                            "name": "string",
                                            "value": "string"
                                          }
                                        ]
                                      ],
                                      "name": "string",
                                      "parameters": [
                                        "list",
                                        [
                                          "object",
                                          {
                                            "array": [
                                              "list",
                                              "string"
                                            ],
                                            "map": [
                                              "map",
                                              "string"
                                            ],
                                            "name": "string",
                                            "string": "string"
                                          }
                                        ]
                                      ]
                                    }
                                  ],
                                  "ref": "string",
                                  "repoURL": "string",
                                  "targetRevision": "string"
                                }
                              ]
                            ]
                          ],
                          "syncOptions": [
                            "list",
                            "string"
                          ],
                          "syncStrategy": [
                            "object",
                            {
                              "apply": [
                                "object",
                                {
                                  "force": "bool"
                                }
                              ],
                              "hook": [
                                "object",
                                {
                                  "force": "bool"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "spec": [
                    "object",
                    {
                      "destination": [
                        "object",
                        {
                          "name": "string",
                          "namespace": "string",
                          "server": "string"
                        }
                      ],
                      "ignoreDifferences": [
                        "list",
                        [
                          "object",
                          {
                            "group": "string",
                            "jqPathExpressions": [
                              "list",
                              "string"
                            ],
                            "jsonPointers": [
                              "list",
                              "string"
                            ],
                            "kind": "string",
                            "managedFieldsManagers": [
                              "list",
                              "string"
                            ],
                            "name": "string",
                            "namespace": "string"
                          }
                        ]
                      ],
                      "info": [
                        "list",
                        [
                          "object",
                          {
                            "name": "string",
                            "value": "string"
                          }
                        ]
                      ],
                      "project": "string",
                      "revisionHistoryLimit": "number",
                      "source": [
                        "object",
                        {
                          "chart": "string",
                          "directory": [
                            "object",
                            {
                              "exclude": "string",
                              "include": "string",
                              "jsonnet": [
                                "object",
                                {
                                  "extVars": [
                                    "list",
                                    [
                                      "object",
                                      {
                                        "code": "bool",
                                        "name": "string",
                                        "value": "string"
                                      }
                                    ]
                                  ],
                                  "libs": [
                                    "list",
                                    "string"
                                  ],
                                  "tlas": [
                                    "list",
                                    [
                                      "object",
                                      {
                                        "code": "bool",
                                        "name": "string",
                                        "value": "string"
                                      }
                                    ]
                                  ]
                                }
                              ],
                              "recurse": "bool"
                            }
                          ],
                          "helm": [
                            "object",
                            {
                              "fileParameters": [
                                "list",
                                [
                                  "object",
                                  {
                                    "name": "string",
                                    "path": "string"
                                  }
                                ]
                              ],
                              "ignoreMissingValueFiles": "bool",
                              "parameters": [
                                "list",
                                [
                                  "object",
                                  {
                                    "forceString": "bool",
                                    "name": "string",
                                    "value": "string"
                                  }
                                ]
                              ],
                              "passCredentials": "bool",
                              "releaseName": "string",
                              "skipCrds": "bool",
                              "valueFiles": [
                                "list",
                                "string"
                              ],
                              "values": "string",
                              "valuesObject": "dynamic",
                              "version": "string"
                            }
                          ],
                          "kustomize": [
                            "object",
                            {
                              "commonAnnotations": [
                                "map",
                                "string"
                              ],
                              "commonAnnotationsEnvsubst": "bool",
                              "commonLabels": [
                                "map",
                                "string"
                              ],
                              "forceCommonAnnotations": "bool",
                              "forceCommonLabels": "bool",
                              "images": [
                                "list",
                                "string"
                              ],
                              "namePrefix": "string",
                              "nameSuffix": "string",
                              "namespace": "string",
                              "patches": [
                                "list",
                                [
                                  "object",
                                  {
                                    "options": [
                                      "map",
                                      "bool"
                                    ],
                                    "patch": "string",
                                    "path": "string",
                                    "target": [
                                      "object",
                                      {
                                        "annotationSelector": "string",
                                        "group": "string",
                                        "kind": "string",
                                        "labelSelector": "string",
                                        "name": "string",
                                        "namespace": "string",
                                        "version": "string"
                                      }
                                    ]
                                  }
                                ]
                              ],
                              "replicas": [
                                "list",
                                [
                                  "object",
                                  {
                                    "count": "string",
                                    "name": "string"
                                  }
                                ]
                              ],
                              "version": "string"
                            }
                          ],
                          "path": "string",
                          "plugin": [
                            "object",
                            {
                              "env": [
                                "list",
                                [
                                  "object",
                                  {
                                    "name": "string",
                                    "value": "string"
                                  }
                                ]
                              ],
                              "name": "string",
                              "parameters": [
                                "list",
                                [
                                  "object",
                                  {
                                    "array": [
                                      "list",
                                      "string"
                                    ],
                                    "map": [
                                      "map",
                                      "string"
                                    ],
                                    "name": "string",
                                    "string": "string"
                                  }
                                ]
                              ]
                            }
                          ],
                          "ref": "string",
                          "repoURL": "string",
                          "targetRevision": "string"
                        }
                      ],
                      "sources": [
                        "tuple",
                        [
                          [
                            "object",
                            {
                              "chart": "string",
                              "directory": [
                                "object",
                                {
                                  "exclude": "string",
                                  "include": "string",
                                  "jsonnet": [
                                    "object",
                                    {
                                      "extVars": [
                                        "list",
                                        [
                                          "object",
                                          {
                                            "code": "bool",
                                            "name": "string",
                                            "value": "string"
                                          }
                                        ]
                                      ],
                                      "libs": [
                                        "list",
                                        "string"
                                      ],
                                      "tlas": [
                                        "list",
                                        [
                                          "object",
                                          {
                                            "code": "bool",
                                            "name": "string",
                                            "value": "string"
                                          }
                                        ]
                                      ]
                                    }
                                  ],
                                  "recurse": "bool"
                                }
                              ],
                              "helm": [
                                "object",
                                {
                                  "fileParameters": [
                                    "list",
                                    [
                                      "object",
                                      {
                                        "name": "string",
                                        "path": "string"
                                      }
                                    ]
                                  ],
                                  "ignoreMissingValueFiles": "bool",
                                  "parameters": [
                                    "list",
                                    [
                                      "object",
                                      {
                                        "forceString": "bool",
                                        "name": "string",
                                        "value": "string"
                                      }
                                    ]
                                  ],
                                  "passCredentials": "bool",
                                  "releaseName": "string",
                                  "skipCrds": "bool",
                                  "valueFiles": [
                                    "list",
                                    "string"
                                  ],
                                  "values": "string",
                                  "valuesObject": "dynamic",
                                  "version": "string"
                                }
                              ],
                              "kustomize": [
                                "object",
                                {
                                  "commonAnnotations": [
                                    "map",
                                    "string"
                                  ],
                                  "commonAnnotationsEnvsubst": "bool",
                                  "commonLabels": [
                                    "map",
                                    "string"
                                  ],
                                  "forceCommonAnnotations": "bool",
                                  "forceCommonLabels": "bool",
                                  "images": [
                                    "list",
                                    "string"
                                  ],
                                  "namePrefix": "string",
                                  "nameSuffix": "string",
                                  "namespace": "string",
                                  "patches": [
                                    "list",
                                    [
                                      "object",
                                      {
                                        "options": [
                                          "map",
                                          "bool"
                                        ],
                                        "patch": "string",
                                        "path": "string",
                                        "target": [
                                          "object",
                                          {
                                            "annotationSelector": "string",
                                            "group": "string",
                                            "kind": "string",
                                            "labelSelector": "string",
                                            "name": "string",
                                            "namespace": "string",
                                            "version": "string"
                                          }
                                        ]
                                      }
                                    ]
                                  ],
                                  "replicas": [
                                    "list",
                                    [
                                      "object",
                                      {
                                        "count": "string",
                                        "name": "string"
                                      }
                                    ]
                                  ],
                                  "version": "string"
                                }
                              ],
                              "path": "string",
                              "plugin": [
                                "object",
                                {
                                  "env": [
                                    "list",
                                    [
                                      "object",
                                      {
                                        "name": "string",
                                        "value": "string"
                                      }
                                    ]
                                  ],
                                  "name": "string",
                                  "parameters": [
                                    "list",
                                    [
                                      "object",
                                      {
                                        "array": [
                                          "list",
                                          "string"
                                        ],
                                        "map": [
                                          "map",
                                          "string"
                                        ],
                                        "name": "string",
                                        "string": "string"
                                      }
                                    ]
                                  ]
                                }
                              ],
                              "ref": "string",
                              "repoURL": "string",
                              "targetRevision": "string"
                            }
                          ]
                        ]
                      ],
                      "syncPolicy": [
                        "object",
                        {
                          "automated": [
                            "object",
                            {
                              "allowEmpty": "bool",
                              "prune": "bool",
                              "selfHeal": "bool"
                            }
                          ],
                          "managedNamespaceMetadata": [
                            "object",
                            {
                              "annotations": [
                                "map",
                                "string"
                              ],
                              "labels": [
                                "map",
                                "string"
                              ]
                            }
                          ],
                          "retry": [
                            "object",
                            {
                              "backoff": [
                                "object",
                                {
                                  "duration": "string",
                                  "factor": "number",
                                  "maxDuration": "string"
                                }
                              ],
                              "limit": "number"
                            }
                          ],
                          "syncOptions": [
                            "list",
                            "string"
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "timeouts": [],
            "wait": [],
            "wait_for": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "helm_release.argocd",
            "helm_release.argocd-apps",
            "helm_release.nfs_server",
            "kubernetes_namespace.argocd",
            "kubernetes_namespace.database",
            "kubernetes_namespace.nfs",
            "kubernetes_secret.mariadb_credentials",
            "time_sleep.wait_for_argocd",
            "time_sleep.wait_for_services"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "argocd",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "argocd",
            "metadata": [
              {
                "annotations": {
                  "meta.helm.sh/release-name": "argocd",
                  "meta.helm.sh/release-namespace": "argocd"
                },
                "generate_name": "",
                "generation": 0,
                "labels": {
                  "app.kubernetes.io/managed-by": "Helm"
                },
                "name": "argocd",
                "resource_version": "893130",
                "uid": "3d36dbef-4969-4af8-ad79-dc69b2146c7c"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "database",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "database",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "database",
                "resource_version": "893129",
                "uid": "d342a0ba-6283-4979-8ab5-10c6df5aa4e3"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "erpnext",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "erpnext",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "erpnext",
                "resource_version": "893131",
                "uid": "a2adb7b5-8a62-4d38-9f1d-a13b4777b4c6"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "nfs",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "nfs",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "nfs",
                "resource_version": "893132",
                "uid": "2f94d8ad-7608-4688-814a-0e9b18d8f157"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_secret",
      "name": "mariadb_credentials",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "binary_data": null,
            "data": {
              "mariadb-password": "SMNGg8X66YhT7UfW",
              "mariadb-replication-password": "SMNGg8X66YhT7UfW",
              "mariadb-root-password": "SMNGg8X66YhT7UfW"
            },
            "id": "database/mariadb-credentials",
            "immutable": false,
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "mariadb-credentials",
                "namespace": "database",
                "resource_version": "893141",
                "uid": "ef289acc-a8fb-4825-8e62-8f47ef93d488"
              }
            ],
            "timeouts": null,
            "type": "Opaque",
            "wait_for_service_account_token": true
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "binary_data"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "data"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMH19",
          "dependencies": [
            "kubernetes_namespace.database"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_service",
      "name": "argogrpc",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "argocd/argogrpc",
            "metadata": [
              {
                "annotations": {
                  "alb.ingress.kubernetes.io/backend-protocol-version": "GRPC"
                },
                "generate_name": "",
                "generation": 0,
                "labels": {
                  "app": "argogrpc"
                },
                "name": "argogrpc",
                "namespace": "argocd",
                "resource_version": "893144",
                "uid": "eeb3764d-7c54-4717-9516-808b3c36ff07"
              }
            ],
            "spec": [
              {
                "allocate_load_balancer_node_ports": true,
                "cluster_ip": "10.152.183.56",
                "cluster_ips": [
                  "10.152.183.56"
                ],
                "external_ips": null,
                "external_name": "",
                "external_traffic_policy": "",
                "health_check_node_port": 0,
                "internal_traffic_policy": "Cluster",
                "ip_families": [
                  "IPv4"
                ],
                "ip_family_policy": "SingleStack",
                "load_balancer_class": "",
                "load_balancer_ip": "",
                "load_balancer_source_ranges": null,
                "port": [
                  {
                    "app_protocol": "",
                    "name": "",
                    "node_port": 0,
                    "port": 443,
                    "protocol": "TCP",
                    "target_port": "8080"
                  }
                ],
                "publish_not_ready_addresses": false,
                "selector": {
                  "app.kubernetes.io/name": "argocd-server"
                },
                "session_affinity": "None",
                "session_affinity_config": [],
                "type": "ClusterIP"
              }
            ],
            "status": [
              {
                "load_balancer": [
                  {
                    "ingress": []
                  }
                ]
              }
            ],
            "timeouts": null,
            "wait_for_load_balancer": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_namespace.argocd"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "time_sleep",
      "name": "wait_for_argocd",
      "provider": "provider[\"registry.terraform.io/hashicorp/time\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "create_duration": "90s",
            "destroy_duration": null,
            "id": "2024-12-17T21:08:15Z",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "helm_release.argocd",
            "kubernetes_namespace.argocd"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "time_sleep",
      "name": "wait_for_services",
      "provider": "provider[\"registry.terraform.io/hashicorp/time\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "create_duration": "30s",
            "destroy_duration": null,
            "id": "2024-12-17T21:08:42Z",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "helm_release.argocd",
            "helm_release.argocd-apps",
            "helm_release.nfs_server",
            "kubernetes_namespace.argocd",
            "kubernetes_namespace.database",
            "kubernetes_namespace.nfs",
            "kubernetes_secret.mariadb_credentials",
            "time_sleep.wait_for_argocd"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
